{"version":3,"sources":["images/bernie.jpg","images/dachshund.jpg","images/golden.jpg","images/husky.jpg","images/iggy.jpg","images/norwich.jpg","images/pom.jpg","images/poodle.jpg","images/pug.jpg","images/sheltie.jpg","images/shibe.jpg","images/westie.jpg","components/Navbar/index.js","components/Puppies/index.js","components/Container/index.js","components/Footer/index.js","components/Banner/index.js","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Puppies","onClick","e","clickEvent","target","src","name","alt","Container","shake","puppies","map","a","i","key","Footer","Banner","images","bernie","dachshund","golden","husky","iggy","norwich","pom","poodle","pug","sheltie","shibe","westie","App","state","allPuppies","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setState","setTimeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.037aeba6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bernie.7efffe70.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dachshund.4294ee1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/golden.dfc3b1e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/husky.9eda8c19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iggy.33fa0f20.jpg\";","module.exports = __webpack_public_path__ + \"static/media/norwich.ac7ddd24.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pom.3bb70abc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poodle.ef029a0c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pug.ccfae7c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sheltie.62e60584.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shibe.c28e7f5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/westie.7a53e421.jpg\";","import React from 'react';\nimport './style.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;","import React from 'react';\nimport './style.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Puppies = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Puppies;","import React from 'react';\nimport './style.css';\nimport Puppies from '../Puppies';\n\n// main container for each Puppies component\n// loops through each index in props.puppies, which contains an array of puppy images\n// to create a new Puppies component for each image\n// attaches the passed down clickEvent function to each Puppies component\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.puppies.map((a, i) => <Puppies name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;","import React from 'react';\nimport './style.css';\n\nconst Footer = () => <div className=\"footer text-center\"></div>;\n\nexport default Footer;","import React from 'react';\nimport './style.css';\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">Adopt all the puppies without choosing the same one twice!</p>\n  </div>\n);\nexport default Banner;","\nimport bernie from './images/bernie.jpg';\nimport dachshund from './images/dachshund.jpg';\nimport golden from './images/golden.jpg';\nimport husky from './images/husky.jpg';\nimport iggy from './images/iggy.jpg';\nimport norwich from './images/norwich.jpg';\nimport pom from './images/pom.jpg';\nimport poodle from './images/poodle.jpg';\nimport pug from './images/pug.jpg';\nimport sheltie from './images/sheltie.jpg';\nimport shibe from './images/shibe.jpg';\nimport westie from './images/westie.jpg';\n\nconst images = [\n  bernie,\n  dachshund,\n  golden,\n  husky,\n  iggy,\n  norwich,\n  pom,\n  poodle,\n  pug,\n  sheltie,\n  shibe,\n  westie\n];\n\nexport default images;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Banner from \"./components/Banner\";\nimport images from \"./images\";\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: '',\n\n    // contains intro, success, and failure message\n    navMessage: 'Click a puppy to start!',\n\n    // contains an array of image urls\n    allPuppies: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Puppies component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current Puppies array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allPuppies: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allPuppies: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allPuppies array to Container to create a Puppies component for each image.\n  // passes the this.checkClicked down to container to pass to each Puppies component to be used for the click event.\n  render() { \n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          puppies={state.allPuppies}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}